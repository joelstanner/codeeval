"""
BIG DIGITS
CHALLENGE DESCRIPTION:

In this challenge you're presented with a situation in which you need to output
big symbols on devices which only support ASCII characters and single,
fixed-width fonts. To do this you're going to use pseudo-graphics to ‘draw’
these big symbols.

Here is an example of the font with digits from 0 to 9:

-**----*--***--***---*---****--**--****--**---**--
*--*--**-----*----*-*--*-*----*-------*-*--*-*--*-
*--*---*---**---**--****-***--***----*---**---***-
*--*---*--*-------*----*----*-*--*--*---*--*----*-
-**---***-****-***-----*-***---**---*----**---**--
--------------------------------------------------
Each pixel is marked either with asterisk ‘*’ or with minus ‘-’. Size of a
digit is 5×6 pixels.

Your task is to write a program, which outputs the numbers given to you with the
font as in the example.

INPUT SAMPLE:

The first argument is a file that contains the lines with digits sequences you
need to magnify. E.g.:

3.1415926
1.41421356
01-01-1970
2.7182818284
4 8 15 16 23 42

OUTPUT SAMPLE:

Print to stdout the magnified digits:

***----*---*-----*--****--**--***---**--
---*--**--*--*--**--*----*--*----*-*----
-**----*--****---*--***---***--**--***--
---*---*-----*---*-----*----*-*----*--*-
***---***----*--***-***---**--****--**--
----------------------------------------
--*---*-----*---*---***----*--***--****--**--
-**--*--*--**--*--*----*--**-----*-*----*----
--*--****---*--****--**----*---**--***--***--
--*-----*---*-----*-*------*-----*----*-*--*-
-***----*--***----*-****--***-***--***---**--
---------------------------------------------
-**----*---**----*----*---**--****--**--
*--*--**--*--*--**---**--*--*----*-*--*-
*--*---*--*--*---*----*---***---*--*--*-
*--*---*--*--*---*----*-----*--*---*--*-
-**---***--**---***--***--**---*----**--
----------------------------------------
***--****---*---**--***---**----*---**--***---**---*---
---*----*--**--*--*----*-*--*--**--*--*----*-*--*-*--*-
-**----*----*---**---**---**----*---**---**---**--****-
*-----*-----*--*--*-*----*--*---*--*--*-*----*--*----*-
****--*----***--**--****--**---***--**--****--**-----*-
-------------------------------------------------------
-*----**----*--****---*---**--***--***---*---***--
*--*-*--*--**--*-----**--*-------*----*-*--*----*-
****--**----*--***----*--***---**---**--****--**--
---*-*--*---*-----*---*--*--*-*-------*----*-*----
---*--**---***-***---***--**--****-***-----*-****-
--------------------------------------------------
CONSTRAINTS:

Input lines are up to 16 symbols long.
Input can contain some other symbols, which should be ignored (i.e. points,
hyphens, spaces); only numbers must be printed out.
"""
from sys import argv


NUMBERS = [['-**--', '*--*-', '*--*-', '*--*-', '-**--'],  # 0
           ['--*--', '-**--', '--*--', '--*--', '-***-'],  # 1
           ['***--', '---*-', '-**--', '*----', '****-'],  # 2
           ['***--', '---*-', '-**--', '---*-', '***--'],  # 3
           ['-*---', '*--*-', '****-', '---*-', '---*-'],  # 4
           ['****-', '*----', '***--', '---*-', '***--'],  # 5
           ['-**--', '*----', '***--', '*--*-', '-**--'],  # 6
           ['****-', '---*-', '--*--', '-*---', '-*---'],  # 7
           ['-**--', '*--*-', '-**--', '*--*-', '-**--'],  # 8
           ['-**--', '*--*-', '-***-', '---*-', '-**--']]  # 9


def parse_num(number):
    """Print big numbers from the input"""
    new_num = ''.join(char for char in number if char.isdigit())
    for i in range(5):
        for char in new_num:
            print(NUMBERS[int(char)][i], end="")
        print()
    print('-' * 5 * len(new_num))


if __name__ == '__main__':
    with open(argv[1], 'r') as file:
        for line in file:
            parse_num(line)
