"""
Given a sequence, write a program to detect cycles within it.

INPUT SAMPLE:

Your program should accept as its first argument a path to a filename
containing a sequence of numbers (space delimited). The file can have
multiple such lines. E.g

2 0 6 3 1 6 3 1 6 3 1
3 4 8 0 11 9 7 2 5 6 10 1 49 49 49 49
1 2 3 1 2 3 1 2 3

OUTPUT SAMPLE:

Print to stdout the first cycle you find in each sequence. Ensure that
there are no trailing empty spaces on each line you print. E.g.

6 3 1
49
1 2 3

The cycle detection problem is explained more widely on wiki

Constrains:
The elements of the sequence are integers in range [0, 99]
The length of the sequence is in range [0, 50]
"""


from sys import argv


INPUT_FILE = argv[1]


def detect_cycle(input_file):
    with open(input_file, mode="r") as f:
        for line in f:
            cycle_line = [int(x) for x in line.split()]
            result = cycle_check(cycle_line)
            print(*result, sep=" ")


def cycle_check(cycle_line):
    """Run cycle check based on tortise/hare algo."""
    tortuga = 1
    hare = 2

    # find the cycle using tortoise and hare
    try:
        while cycle_line[tortuga] != cycle_line[hare]:
            hare += 2
            tortuga += 1
            if hare >= len(cycle_line):
                hare = len(cycle_line) - 1
    except IndexError:
        return "No Loop Found"

    # Find the index of the first position of the cycle
    mu_index = 0  # index of first cycle
    tortuga = 0
    while cycle_line[tortuga] != cycle_line[hare]:
        tortuga += 1
        hare += 1
        mu_index += 1

    lam = 1  # lam is the length of the cycle period
    hare = cycle_line[tortuga + 1]
    while cycle_line[tortuga] != cycle_line[hare]:
        hare += 1
        lam += 1

    return cycle_line[mu_index:mu_index + lam]

if __name__ == '__main__':
    detect_cycle(INPUT_FILE)
